import { IObservable, IObserver, ISource, mergeAllSingleObservable, readObservableValue, single } from '@lirx/core';
import { objectDefineProperty } from '../../../misc/object-define-property';

type IHavingProperty<GPropertyName extends string, GValue> =
  Record<GPropertyName, GValue>;

type IHavingObservableProperty<GPropertyName extends string, GValue> =
  Record<GPropertyName, IObservable<GValue>>;

type IHavingReadonlyObserverProperty<GPropertyName extends string, GValue> =
  Readonly<Record<GPropertyName, IObserver<GValue>>>;

const DEFAULT_OPTIONS = {
  configurable: true,
  enumerable: true,
};

function bindPropertyWithSource<GPropertyName extends string, GValue>(
  target: IHavingProperty<GPropertyName, GValue>,
  propertyName: GPropertyName,
  emit: IObserver<GValue>,
  subscribe: IObservable<GValue>,
): void {
  objectDefineProperty(target, propertyName, {
    ...DEFAULT_OPTIONS,
    get: (): GValue => {
      return readObservableValue(subscribe, (): GValue => {
        console.warn(`The source did not immediately send a value`);
        return (void 0) as unknown as GValue;
      });
    },
    set: emit,
  });
}


// export function bindObservablePropertyWithHigherOrderSource<GPropertyName extends string, GValue>(
//   target: IHavingObservableProperty<GPropertyName, GValue>,
//   propertyName: GPropertyName,
//   {
//     emit,
//     subscribe,
//   }: ISource<IObservable<GValue>>,
// ): void {
//   bindObservablePropertyWithHigherOrderObserverAndObservable<GPropertyName, GValue>(
//     target,
//     propertyName,
//     emit,
//     mergeAllSingleObservable(subscribe),
//   );
// }

function bindObservablePropertyWithHigherOrderObserverAndObservable<GPropertyName extends string, GValue>(
  target: IHavingObservableProperty<GPropertyName, GValue>,
  propertyName: GPropertyName,
  emit: IObserver<IObservable<GValue>>,
  subscribe: IObservable<GValue>,
): void {
  objectDefineProperty(target, propertyName, {
    ...DEFAULT_OPTIONS,
    get: (): IObservable<GValue> => {
      return subscribe;
    },
    set: emit,
  });
}

// export function bindReadonlyObserverPropertyWithHigherOrderObserver<GPropertyName extends string, GValue>(
//   target: IHavingReadonlyObserverProperty<GPropertyName, GValue>,
//   propertyName: GPropertyName,
//   emit: IObserver<IObservable<GValue>>,
// ): void {
//   bindReadonlyObserverPropertyWithObserver<GPropertyName, GValue>(
//     target,
//     propertyName,
//     (value: GValue): void => {
//       emit(single(value));
//     },
//   );
// }

function bindReadonlyObserverPropertyWithObserver<GPropertyName extends string, GValue>(
  target: IHavingReadonlyObserverProperty<GPropertyName, GValue>,
  propertyName: GPropertyName,
  emit: IObserver<GValue>,
): void {
  objectDefineProperty(target, propertyName, {
    ...DEFAULT_OPTIONS,
    get: (): IObserver<GValue> => {
      return emit;
    },
    set: (): never => {
      throw new Error(`Readonly`);
    },
  });
}


export type IHavingObservableViewProperties<GPropertyName extends string, GValue> =
  IHavingProperty<GPropertyName, GValue>
  & IHavingObservableProperty<`${GPropertyName}$`, GValue>
  & IHavingReadonlyObserverProperty<`$${GPropertyName}`, GValue>
  ;

function bindObservableViewPropertiesWithHigherOrderSource<GPropertyName extends string, GValue>(
  target: IHavingObservableViewProperties<GPropertyName, GValue>,
  propertyName: GPropertyName,
  {
    emit,
    subscribe,
  }: ISource<IObservable<GValue>>,
): void {
  const $value = (value: any): void => {
    emit(single(value));
  };

  const value$ = mergeAllSingleObservable(subscribe);

  // value: GValue;
  bindPropertyWithSource<GPropertyName, GValue>(
    target,
    propertyName,
    $value,
    value$,
  );

  // value$: IObservable<GValue>;
  bindObservablePropertyWithHigherOrderObserverAndObservable<`${GPropertyName}$`, GValue>(
    target,
    `${propertyName}$`,
    emit,
    value$,
  );

  // readonly $value: IObserver<GValue>;
  bindReadonlyObserverPropertyWithObserver(
    target,
    `$${propertyName}`,
    $value,
  );
}

