import { uuid } from '../../uuid';
import { isDocumentFragmentNode } from '../is/is-document-fragment-node';
import { isElementNode } from '../is/is-element-node';

export interface IPatchQuerySelectorScopeCallback<GReturn> {
  (
    parentNode: Node,
    selector: string,
  ): GReturn;
}

export function patchQuerySelectorScope<GReturn>(
  parentNode: Node,
  selector: string,
  callback: IPatchQuerySelectorScopeCallback<GReturn>,
): GReturn {
  const hasScope: boolean = selector.includes(':scope');

  if (hasScope) {
    if (isElementNode(parentNode)) {
      const id: string = generatePatchQuerySelectorScopeId();
      parentNode.setAttribute(id, '');

      const result: GReturn = callback(
        parentNode,
        selector.replace(':scope', `[${id}]`),
      );

      parentNode.removeAttribute(id as string);

      return result;
    } else if (isDocumentFragmentNode(parentNode)) {
      const id: string = generatePatchQuerySelectorScopeId();
      const _parentNode: Element = document.createElement('div');
      _parentNode.setAttribute(id, '');
      _parentNode.appendChild(parentNode);

      const result: GReturn = callback(
        _parentNode,
        selector.replace(':scope', `[${id}]`),
      );

      while (_parentNode.firstChild !== null) {
        parentNode.appendChild(_parentNode.firstChild);
      }

      return result;
    }
  }

  return callback(
    parentNode,
    selector,
  );
}

/*----*/

function generatePatchQuerySelectorScopeId(): string {
  return `scope-${uuid()}`;
}
