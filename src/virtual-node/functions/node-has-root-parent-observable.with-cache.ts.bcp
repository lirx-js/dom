import { IObservable, shareObservableWithMulticastReplayLastSource, single, switchMapObservable } from '@lirx/core';
import { IVirtualNodeOrNull, VirtualNode } from '../virtual-node.class';

const CACHE = new WeakMap<VirtualNode, IObservable<boolean>>();

export function nodeHasRootParentObservable(
  node: VirtualNode,
): IObservable<boolean> {
  let observable: IObservable<boolean> | undefined = CACHE.get(node);
  if (observable === void 0) {
    if (node.isRoot) {
      observable = single(true);
    } else {
      observable = shareObservableWithMulticastReplayLastSource(
        switchMapObservable(node.parentNode$, (parentNode: IVirtualNodeOrNull): IObservable<boolean> => {
          if (parentNode === null) {
            return single(false);
          } else if (parentNode.isRoot) {
            return single(true);
          } else {
            return nodeHasRootParentObservable(parentNode);
          }
        }),
      );
    }
    CACHE.set(node, observable);
  }
  return observable;
}

